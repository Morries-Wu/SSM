1、使用的mysql数据库,使用学生表student2(id int 主键列 自动增长,
                                    name varchar(20),
                                    age int         )

2、创建maven项目
3、加入依赖
   spring依赖,mybatis依赖,mysql驱动
   mybatis-spring依赖(mybatis网站上提供的,用来在spring项目中,创建mybatis对象)
   spring有关事务的依赖

   mybatis和spring整合的时候,事务是自动提交的

4、创建实体类Student
5、创建Dao接口和mapper文件写sql语句
6、写mybatis主配置文件
7、创建service接口和他的实现类
8、创建spring的配置文件
    [1]声明数据源DataSource,使用的阿里云Druid连接池
    [2]声明SqlSessionFactoryBean类,在这个类内部创建的是SqlSessionFactory对象
    [3]声明MapperScannerConfiguration类,在内部创建Dao代理对象
       创建好的对象都放在spring容器中
    [4]声明Service对象,把[3]中的dao赋值给service属性


事务定义的接口TransactionDefinition
TransactionDefinition接口,定义了三类常量,定义了有关事务控制的属性
事务的属性:
        1、隔离级别
        2、传播行为
        3、事务的超时
        给业务方法说明事务属性

隔离级别:控制事务之间影响的程度
1、DEFAULT:采用DB默认事务隔离级别,Mysql的默认为REPETABLE_READ,Oracl默认为READ_COMMITTED
2、READ_UMCOMMITTED:读未提交,未解决任何并发问题
3、READ_COMMITTED:读已提交,解决脏读,存在不可重复读与幻读
4、REPEATALE_READ:可重复读,解决脏读,不可重复读,存在幻读
5、SERIALIZABLE:串行化,不存在并发问题

超时时间
超时时间,以秒为单位,整数值,默认是-1
超时时间:表示一个业务方法最长的执行时间,没有达到时间执行完毕,spring回滚事务

传播行为
传播行为有七个
传播行为:业务方法在调用时,事务在方法之间的,传递和使用
使用传播行为,标识方法有无事务
1、PROPAGATION_REQUIRED
    spring默认传播行为,方法调用的时候,如果存在事务就是使用当前的事务
    如果没有事务则新建事务,方法在新事务中执行
2、PROPAGATION_REQUIRES_NEW
    方法需要一个新事务,如果调用方法时,存在一个事务,则原来的事务暂停,直到新事务执行完毕
    如果方法调用时,没有事务,则新建一个事务,在新事务执行代码
3、PROPAGATION_SUPPORTS
    SUPPORTS:支持,方法有事务可以正常执行,没有事务也可以正常执行

Spring框架使用事务管理器对象,管理所有的事务
事务管理器接口:PlatformTransactionManager
        作用:定义了事务的操作,主要是commit(),rollback()
事务管理器有很多实现类:一种数据库访问技术有一个实现类,由实现类具体完成事务的提交,回滚
意味着:jdbc或者mybatis访问数据库有自己的事务管理器实现类:DataSourceTransactionManager
hibernate框架,它的事务管理器实现类:HibernateTrasactionManager

事务使用的AOP的环绕通知
环绕通知:可以在目标方法的前和后都能增强功能,不需要修改代码
spring给业务方法执行,增加事务上的切面功能
@Around("execution(所有的业务方法)")
public Object myAround(ProceedingJoinPoint joinpoint){
        try{
        PlatformTransactionManager.beginTransaction();  使用spring的事务管理器,开启事务
        joinpoint.proceed();       执行目标方法
        PlatformTransactionManager.commit();    业务方法提交事务,提交事务
        }catch(Exception e){
            PlatformTransactionManager.rollback(); 业务方法正常执行,回滚事务
        }

}


Spring框架使用自己的注解@Transactional控制事务
@Transactional注解,使用注解的属性控制(隔离级别,传播行为,超时)
属性:
1、propagation:事务的传播行为,他使用的Propagation类的枚举值。Propagation.REQUIRED
2、Isolation:表示隔离级别,使用Isolation类的枚举型,表示隔离级别,默认solation.DEFAULT
3、readOnly:Boolean类型的值,表示数据库操作是否是只读的,默认是false

4、timeout:事务超时,默认是-1,整数值,单位秒,例如timeout=20
5、rollbackFor:表示回滚的异常类列表,他的值是一个数组,每个值是异常类型的class.
6、rollbackForClassName:表示回滚的异常类列表,他的值是异常类名称,是String类型的值
7、noRollbackFor:不需要回滚的异常类列表,是class类型的
8、noRollbackForClassName:不需要回滚的异常类列表,是String类型的值
    位置:
        [1]、在业务方法的上面,是在public方法的上面
        [2]、在类的上面

注解的使用步骤:
        1、在spring的配置文件,声明事务的内容
        声明事务管理器,说明使用哪个事务管理器对象
        声明使用注解管理事务,开启是注解驱动
        2、在类的源代码中,加入@Transactional
        事务的控制模式:
        1、编程式,在代码中编程控制事务
        2、声明式,不用编码

使用AspectJ框架在spring的配置文件中,声明事务控制
使用AspectJ的Aop,声明事务控制叫做声明式事务
1、pom.xml加入spring-aspects的依赖
2、在spring的配置文件声明事务的内容
    [1]声明事务管理器
    [2]声明业务方法需要的事务属性
    [3]声明切入点表达式























