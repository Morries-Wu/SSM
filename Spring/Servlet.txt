Servlet技术
1、servlet是JavaEE规范之一。规范就是接口
2、servlet是Javaweb三大之间之一。三大组件分别是:servlet程序、filter过滤器、Listener监听器
3、servlet是运行在服务器上的Java小程序,它可以接收客户端发送过来的请求,并响应数据给客户端

手动实现servlet程序
1、编写一个类去实现servlet接口
2、实现service方法,处理请求,并响应数据
3、到web.xml中配置servlet程序的访问地址


通过ip地址定位服务器
通过端口号,定位tomcat
通过工程路径,访问那个工程
资源路径,先到web.xml配置文件找到类
端口号对应软件
IP地址对应服务器

servlet的生命周期
1、执行servlet构造器方法
2、执行int初始化方法
第一、二步,是在第一次访问的时候创建servlet程序会调用
3、执行service方法
每次访问都会调用
4、执行destroy销毁方法
第四步,在web工程停止的时候调用

通过继承HttpServlet实现servlet程序
一般在实际项目开发中,都是使用继承HttpServlet类的方式去实现servlet程序
1、编写一个类去继承HttpServlet类
2、根据业务需要重写doGet或Post方法
3、到web.xml中的配置servlet程序的访问地址

Servlet类的继承体系
interface servlet
     实现接口
Class GenericServlet
      继承
Class HttpServlet
      继承
自定义的servlet程序


servlet接口,只是负责定义servlet程序的访问规范
GenericServlet类实现了servlet接口,做了很多空实现并持有一个servletConfig类的引用
并对servletConfig的使用做一些方法

HttpServlet抽取类实现了service()方法,并实现了请求的分发处理
String method=req.getMethod();
我们只需要根据自己的业务需要去重写,doGet或doPost方法即可

Servlet类从类名上来看,就知道Servlet程序的配置信息类
ServletConfig类的三大作用
1、可以获取Servlet程序的别名Servlet-name的值
2、获取初始化参数init-param
3、获取ServletContext对象

Servlet程序和ServletConfig对象都是由tomcat负责创建,我们负责使用
servlet程序默认第一次访问的时候创建,servletConfig是每个servlet程序创建的一个对应的servletConfig对象
每个ServletConfig只能在自己配置的访问到
注意:当重写了init方法之后一定要调用super.init(config)方法;

什么是servletContext
1、servletContext是一个接口,它表示servlet上下文对象
2、一个Web工程,只有一个servletContext对象实例
3、servletContext对象是一个域对象
4、ServletContext是在Web工程部署启动的时候创建,在web工程停止的时候销毁。

什么是域对象?
域对象,是可以像map一样存取数据的对象,叫域对象
这里的域对象指的是存储数据的操作范围,整个web工程

            存数据             取数据             删除数据
Map         put()             get()             remove()
域对象    setAttribute()    getAttribute()    removeAttribute()

ServletContext类的作用
1、获取web.xml中配置的上下文参数context-param
2、获取当前的工程路径,格式:/工程路径
3、获取工程部署后在服务器硬盘上的绝对路径
4、像Map一样存储数据

HTTPServletRequest类
HTTPServletRequest类有什么作用
每次只要请求进入tomcat服务器,tomcat服务器就会把请求过来的HTTP协议信息解析好封装到Request对象中
然后传递到service方法(doGet和doPost)中给我们使用。我们可以通过HTTPServletRequest对象,获取到所有请求的信息

getRequestURI()             获取请求的资源路径
getRequestURL()             获取请求的统一资源定位符(绝对路径)
getRemoteHost()             获取客户端的ip地址
getHeader()                 获取请求头
getParameter()              获取请求的参数
getParamterValues()         获取请求的参数(多个值的时候使用)
getMethod()                 获取请求的方式GET或POST
setAttribute(key,value)     设置域数据
getAttribute(key)           获取数据
getRequestDispatcher()      获取请求转发对象
sendRedirect();             重定向

请求的转发
什么是请求的转发
请求转发是指服务器收到请求后,从一次资源跳转到另一个资源的操作叫请求转发

请求转发的特点:
1、浏览器地址栏没有变化
2、他们是一次请求
3、他们共享request域中的数据
4、可以转发到WEB-INF目录下
5、不可以访问外部资源

HttpServletResponse类
HttpServletResponse类和HttpServletRequest类一样。每次请求进来,tomcat服务器都会创建
一个response对象传递servlet程序去使用,httpServletRquest表示请求过来的信息,HttpServletResponese
表示所有响应的信息
我们如果需要设置返回给客户端的信息,都可以通过HttpServletResponese对象来进行设置

两种输出流的说明
字节流   getOutputStream    常用于下载(传递二进制数据)
字符流   getWriter          常用于回传字符串(常用)
两个流同时只能使用一个
使用了字节流,就不能再使用字符流,反之亦然,否则就会报错

请求重定向
请求重定向,是指客户端给服务器发请求,然后服务器告诉客户端。我给你一些地址,你去新地址访问。
叫请求重定向(因为之前的地址可能已经被废弃)
特点:
1、浏览器地址会发生变化
2、两次请求
3、不共享request域中的数据
4、不能访问WEB-INF下的资源
5、可以访问工程外的资源

第一种方式
设置响应状态码302,表示重定向
resp.setStatus(302);
设置响应头,说明 新的地址在哪里
resp.setHeader("Location","http://localhost:8080");

第二种方式(推荐使用)
resp.sendRedirect("http://localhost:8080/Dnamic/response02");

现在要把一个字符串返回给客户端怎么做
1、先得到响应的字符输出流
resp.getWriter().write(String);
客户端怎么接收呢
如果需要获取来自服务器的响应,可以使用XMLHttpRequest对象responseText或responseXML属性
responseText    获取字符串形式的响应数据
responseXML     获取XML形式的响应数据

当请求发送到服务器时,我们需要执行一些基于响应的任务
每当readyState改变时,就会触发onreadystatechange
readyState
0   请求未初始化
1   服务器链接已建立
2   请求已接收
3   请求处理中
4   请求已完成,且响应已就绪