第一章 框架概述
三层架构
MVC:web开发中,使用mvc架构模式。m:数据,V:视图,C:控制器
    C控制器:接收请求,调用service对象,显示请求的处理结果,当前使用servlet作为控制器
    V视图:现在使用jsp,html,css,js。显示请求处理的结果,把M中的数据显示出来
    M数据:来自数据库mysql,来自文件,来自网络
mvc作用:
    [1]实现解耦合。
    [2]让mvc各负其职。
    [3]使系统扩展更好,更容易维护。

三层架构:
1、界面层(视图层):接收用户的请求,调用service,显示请求的处理结果的。包含了jsp,html,servlet等对象。
2、业务逻辑层:处理业务逻辑,使用算法处理数据的。把数据返回给界面层。对应的是service包。
3、持久层(数据库访问层):访问数据库,或者读取文件,访问网络,获取数据。对应的包是Dao

三层架构请求处理流程
用户发起请求----->界面层------>业务层逻辑层------->持久层----->数据库(mysql)

三层架构模式和框架
每一层对应着一个框架
(1)界面层-----SpringMVC框架
(2)业务层-----Spring
(3)持久层-----MyBatis框架

框架
(1)什么是框架[framework]
框架:就是一个软件,完成了部分的功能。软件中的类和类之间的方法调用都已经规定好了
通过这些可以完成某些功能,框架看作是模板。
框架是可以升级的,改造的。框架是安全的。
框架是对某一方面有用的,不是全能的。

Mybatis框架
mybatis可以操作数据库,对数据执行增删改查,看作是高级的jdbc。解决jdbc的缺点
mybatis能做什么
[1]注册驱动
[2]创建jdbc中使用的Connection,Statement,ResultSet
[3]执行sql语句,得到ResultSet
[4]处理ResultSet,把记录集中的数据转为Java对象,同时还能把Java对象放入到List集合
[5]关闭资源
[6]实现sql语句和Java代码的解耦合
学习链接:https://mybatis.org/mybatis-3/zh/getting-started.html
下载链接:https://github.com/mybatis/mybatis-3

第二章mybatis入门
[1]创建student表(id,name,email,age)
[2]新建maven项目
[3]修改pom.xml
   1、加入依赖Mybatis依赖,MySQL驱动,junit
   2、在<build>加入资源插件
[4]创建实体类Student。定义属性,属性名和列名保持一致
[5]创建Dao接口,定义操作数据库的方法
[6]创建xml文件(mapper文件),写sql语句
    mybatis框架推荐是把sql语句和Java代码分开
    mapper文件:定义和Dao接口在同一目录,一个表一个mapper文件
[7]创建mybatis的主配置文件(xml文件):有一个,放在resources文件下
    1、定义创建连接实例的数据源(DataSource)对象
    2、指定其他mapper文件的位置
[8]创建测试内容
    使用main方法,测试mybatis访问数据库
    也可以使用junit访问数据库

<select>:表示查询操作,里面是select语句
        id:要执行的sql语句的唯一标识,是一个自定义字符串
            推荐使用Dao接口中的名称
        resultType:告诉mybatis,执行sql语句,把数据赋值给那个类型的Java对象
            resultType的值现在使用的Java对象的全限定名称

1、自动提交:当你的sql语句执行完毕后,提交事务。数据库更新操作之间保存到数据
2、手动提交事务:在你需要提交事务的位置,执行方法,提交事务或者回滚事务

Mybatis的一些重要对象
[1]Resources:mybatis框架中的对象,一个作用读取主配置信息。
InputStream read = Resources.getResourceAsStream("mybatis.xml");

[2]SqlSessionFactoryBuilder:负责创建SqlSessionFactory对象
SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(read);

[3]SqlSessionFactory:重要对象
SqlSessionFactory是重量级对象:创建此对象需要使用更多的资源和时间,在项目中有一个就可以了
SqlSessionFactory接口:作用是SqlSession的工厂,就是创建SqlSession对象
DefaultSqlSessionFactory实现类
public class DefaultSqlSessionFactory implements SqlSessionFactory {}

SqlSessionFactory接口中的方法
openSession():获取一个默认的SqlSession对象,默认是需要手工提交事务的。
openSession(boolean):boolean 参数表示是否自动提交事务。
                     true:创建一个自动提交事务的SqlSession
                     false:等于没有参数的openSession()

[4]SqlSession对象
SqlSession对象是通过SqlSessionFactory获取的。SqlSession本身是接口
DefaultSqlSession:实现类
public class DefaultSqlSession implements SqlSession {}
SqlSession作用是提供了大量的执行sql语句的方法
selectOne:执行sql语句,最多得到一行记录,多余一行是错误
selectList:执行sql语句,返回多行数据
selectMap:执行sql语句,得到一个Map结果
insert:执行insert语句
update:执行update语句
delete:执行delete语句
commit:提交事务
rollback:回滚事务

注意SqlSession对象不是线程安全的,使用的步骤:
[1]在方法的内部,执行sql语句之前,先获取SqlSession对象
[2]调用SqlSession的方法,执行sql语句
[3]关闭SqlSession对象,执行SqlSession.close()


第三章Mybatis的Dao代理
由mybatis框架在程序执行期间,根据自己的Dao接口,创建一个内存中的接口实现类对象
mybatis把这个技术叫做Dao技术(动态代理,Dao的动态代理)
Dao代理技术:由mybatis创建StudentDao接口的实现类Proxy(StudentDaoImpl),使用框架创建的StudentDaoImpl代替
你自己手工实现的StudentDaoImpl类的功能,不用开发人员写Dao接口的实现类。

Dao代理
mybatis提供代理:mybatis创建Dao接口的实现类对象,完成对sql语句的执行。
mabatis创建一个对象代替你的Dao实现类功能。

使用mybatis代理要求:
[1]mapper文件中的namespace一定要dao接口的全限定名称
[2]mapper文件中标签的id是dao接口方法名称

mybatis代理实现方式
使用SqlSession对象的方法getMapper(dao.class)
例如:现在有StudentDao接口
SqlSession session=MybatisUtils.getSqlSession();
StudentDao dao=session.getMapper(Student.class)
Student stu=dao.selectById(1001);

上面代码中
StudentDao dao=session.getMapper(Student.class)
等同于
StudentDao dao=new StudentDaoImpl();

理解参数
理解参数是:通过Java程序把数据传入到mapper文件中的sql的语句。
参数主要是指dao接口方法的形参

parameterType
parameterType:表示参数的类型,指定dao接口的形参数据类型。
这个属性的值可以使用Java类型的全限定名称或者mybatis定义的别名
这个形参得到数据类型是给mybatis使用,mybatis在给sql语句的参数赋值使用。
PreparedStatement.setXXX(Statement,values)

parameterType:表示参数的类型,指定dao接口的形参数据类型。
这个属性的值可以使用Java类型的全限定名称或者mybatis定义的别名
mybatis执行的sql语句: select id,name,email,age from student where id = ?
?是占位符,使用jdbc中的PreparedStatement执行的sql语句
PreparedStatement pst=con.preparedStatement(sql);
给?位置赋值pst.setInt(1,1005);
第一种用法:
        Java类型的全限定类型名称  parameterType="java.lang.Integer"
第二种用法:
        mabatis定义的Java类型的别名 parameterType="int"

parameterType:mybatis通过反射机制可以获取Dao接口方法参数的类型,可以不写

简单参数
Dao接口中方法的参数只有一个简单类型(Java基本类型和String),占位符#{任意字符},和方法的参数无关
    Student selectByEmail(String email);
    <select id="selectByEmail" resultType="Morries_Wu.Bean.Student">
        select id,name,email,age from student where email=#{studentEmail}
    </select>

@Param:命名参数,在方法的形参前面使用的,定义参数名。这个名称可以在mapper文件中。
    List<Student> selectByNameOrAge(@Param(value = "myname") String name, @Param(value = "myage") Integer age);
        多个简单类型的参数
        当使用了@Param命名后,例如@Param("myname")
        在mapper中,使用#{命名的参数},例如#{myname}
    <select id="selectByNameOrAge" resultType="Morries_Wu.Bean.Student">
        select * from student where name=#{myname} or age=#{myage}
    </select>

Dao接口中多个简单类型的参数,使用位置
参数位置:dao接口中方法的形参列表,从左往右,参数位置是0,1,2,3......
语法格式:#{arg0},#{arg1},#{arg2}
Dao接口方法
    List<Student> selectByPosition(String name, Integer age);
Mapper
    <select id="selectByPosition" resultType="Morries_Wu.Bean.Student">
        select * from student where name=#{arg0} or age=#{arg1}
    </select>

Dao接口参数是一个Map
Dao接口方法
    List<Student> selectStudentByMap(Map<String, Object> map);
Mapper
    <select id="selectStudentByMap" resultType="Morries_Wu.Bean.Student">
        select * from student where name=#{myname} or age=#{myage}
    </select>


#和$的区别
#占位符
语法:#{字符}
mybatis处理#{}使用jdbc对象是PrepareStatement对象
    <select id="selectStudentByMap" resultType="Morries_Wu.Bean.Student">
        select * from student where name=#{myname} or age=#{myage}
    </select>
mybatis创建PrepareStatement对象,执行sql语句
String sql="select * from student where name=? or age=?"
PrepareStatement pst=con.prepreStatement(sql);
pst.setString(1,"春哥");
pst.setInt(2,21);
ResultSet rs=pst.executeQuery();

#{}特点:
1、使用的PrepareStament对象,执行sql语句,效率高
2、使用的PrepareStament对象,能避免sql语句,sql语句执行更安全
3、#{}常常作为列值使用,位于等号的右侧

$占位符
语法:${字符}
mybatis执行${}占位符的sql语句
    <select id="selectStudentByMap" resultType="Morries_Wu.Bean.Student">
        select * from student where name=${myname} or age=${myage}
    </select>
${}表示字符串连接,把sql语句的其他内容和${}内容使用 字符串 连接的方式连在一起
String sql="select * from student where id="+"10001";
mybatis创建Statement对象,执行sql语句
Statement stmt=con.con.createStatement(sql);
ResultSet rs=stmt.executeQuery();
${}的特点
1、使用Statement对象,执行sql语句,效率低
2、${}占位符的值,使用的字符串连接方式,有sql注入的风险.有代码安全的问题
3、${}数据是原样使用的,不会区分数据类型
4、${}常用作表名或者列名,在能保证数据安全的情况下使用${}

封装输出结果
resultType:执行sql得到ResultSet转换的类型,使用类型的完全限定名或别名
注意如果返回的是集合,那应该设置为集合包含的类型,而不是集合本身。ResultType和ResultMap,不能同时使用
mybatis:执行sql语句,得到ResultSet,转化为Java对象

resultType:在执行select时使用,作为<select>标签的属性出现的
resultType:表示结果类型,mysql执行sql语句,得到Java对象的类型。它的值有两种
    1、Java类型的全限定名称
    2、使用别名
    <select id="selectById" resultType="Morries_Wu.Bean.Student">
        select * from student where id=#{studentId}
    </select>
resultType:使用的是Java类型的全限定名称,表示的意思mybatis执行sql,把ResultSet中的数据转为
Student类型的对象.mybatis会做一下操作:
    1、调用Morries_Wu.Bean.Student的无参构造方法,创建对象
    Student student=new Student();      使用反射创建调用对象
    2、同名的列赋值[数据库中的列对应JavaBean中的属性]
    student.setId(rs.getInt("id"));
    student.setString(rs.geString("name"));
    3、得到Java对象,如果Dao接口返回的值是List集合,mybatis把student对象放入到List集合

所以执行Student mystudent=dao.selectById(1001);得到数据库中id=1001这行数据
这行数据的列值,付给了mystudent对象的属性,你能得到mystudent对象,就相当于是id=1001这行数据

自定义别名
mybatis提供给Java类型定义简短,好记名称
自定义别名的步骤
[1]、第一种方式
        1、在mybatis主配置文件,使用typeAliase标签声明别名
        <typeAliases>
           <typeAlias type="Morries_Wu.Bean.Student" alias="stu"/>
        </typeAliases>
        2、在mapper文件中,resultType="别名"
        <select id="selectById"  parameterType="int" resultType="stu">
           select id,name,email,age from student where id = #{studentId}
        </select>
[2]、第二种方式
name:包名,mybatis会把这个包中所有类名作为别名

resultType:表示mybatis执行sql后得到Java对象类型
           规则同名列赋值给同名属性

resultType:表示简单类型
dao方法
    int countStudent();
mapper文件
    <select id="countStudent" resultType="java.lang.Integer">
        select count(*) from student
    </select>

resultType:表示一个map结构的时候,执行sql得到一个Map结构数据,mybatis执行sql,把resultSet转化为Map
           sql执行结果,列名做map的key,列值,作为value
           sql执行得到是一行记录,转为map结构是正确的。
           dao接口返回的是一个map,sql语句最多能获取一行记录,多于一行是错误

resultMap:结果映射,自定义列名和Java对象属性的对应关系。常用在列名和属性名不同的情况
用法
1、先定义resultMap标签,指定列名和属性名称对应关系
2、在select标签使用resultMap属性,指定上面定义的resultMap的id值
    使用resultMap属性,指定映射关系的id
    resultMap和resultType,不能同时使用,二选一
定义resultMap
        id:给resultMap的映射关系起个名称,唯一值
        type:Java类型的全限定名称
        <resultMap id="custmMap" type="Morries_Wu.Bean.Custom">
                <!--定义列名和属性名的对应-->
                <!--主键类型使用id标签-->
                <id column="id" property="cid"/>
                <!--非主键类型使用result标签-->
                <result column="name" property="cname"/>
                <!--列名和属性名相同不用定义-->
        </resultMap>
        mapper
        <select id="selectById" resultMap="custmMap">
             select * from student where id=#{stuid}
        </select>


列名和Java对象属性名称不一样解决方式
使用resultMap:自定义和属性名称对应关系
使用resultType:使用列的别名,让别名和Java对象属性名称一样
    <select id="selectById" resultType="Morries_Wu.Bean.Custom">
        select id cid,name cname,email,age from student where id=#{stuid}
    </select>

Like
1、第一种方式:在Java程序中,把like的内容组装好,把这个内容传入到sql语句
    mapper:
    <select id="selectLikeOne" resultType="Morries_Wu.Bean.Student">
        select * from student where name like #{name}
    </select>
    Test:
    String name = "%李%";
2、第二种方式:在sql语句,组织like的内容
sql语句like的格式:where name like %""空格#{name}空格"%"
    mapper:
    <select id="selectLikeTwo" resultType="Morries_Wu.Bean.Student">
        select * from student where name like "%" #{name} "%"
    </select>
    Test:
    String name="李";

第四章动态sql
什么是动态sql:同一个dao的方法,根据不同的条件可以表示不同的sql语句,主要是where部分有变化
使用mybatis提供的标签,实现动态sql的能力,主要讲if,where,foreach,sql
使用动态sql的时候,dao方法的形参使用Java对象

if标签
语法:
<if test="boolean判断结果">
    sql代码
</if>
在mapper文件中
        <select id="selectStudent" resultType="Student">
            select * from student
            <if test="条件">
                sql语句
            </if>
        </select>

在mapper的动态sql中若出现比较符号最好将其转换为实体符号
否则XML会出现解析出错问题
<       &lt;
>       &gt;
>=      &gt;=
<=      &lt;=

where标签
使用if标签时,容易引起sql语句语法错误,使用where标签解决if产生的语法问题
使用时where,里面是一个或多个if标签,当有一个if标签判断为true,where标签
会转为WHERE关键字附加到sql语句的后面,如果if没有一个条件为true
忽略where和里面的if
语法:
<where>
    <if test="条件1">sql语句1</if>
    <if test="条件2">sql语句2</if>
</where>

where标签删除和它最近的or获取and
    <select id="selectWhere" resultType="Morries_Wu.Bean.Student">
        select * from student
        <where>
            <if test="name!=null and name!=''">or name=#{name}</if>
            <if test="age>0">or age=#{age}</if>
        </where>
    </select>


mybatis-foreach循环
使用foreach可以循环数组,list集合,一般使用在in语句中
语法:
<foreach collection="集合类型" open="开始的字符" close="结束的字符"
    item="集合中的成员" separator="集合成员之间的分隔符">
            #{item的值}
</foreach>

标签属性:
collection:表示,循环的对象是数组,还是list集合
        1、如果dao接口方法的形参是数组
        collection="array"
        2、如果dao接口形参是List
        collection="list"
open:循环开始时的字符。sql.append("(");
close:循环结束时的字符。sql.close(")");
item:集合成员,自定义的变量。Integer item=idlist.get(i); item是集合成员
separator:集合成员之间的分隔符。sql.append(","); 集合之间的分隔符
#{item的值}:获取集合成员的值


1、foreach第一种方式,循环简单类型的list-->
        dao接口:
        List<Student> selectForeachOne(List<Integer> IdList);
        mapper:
        <select id="selectForeachOne" resultType="Morries_Wu.Bean.Student">
            select * from student
            <if test="list!=null and list.size>0">
                where id in
                <foreach collection="list" open="(" close=")"   separator="," item="myid">
                    #{myid}
                </foreach>
            </if>
        </select>

2、foreach第二种方式,循环List<Student>
            dao接口:
            List<Student> selectForeachOne(List<Integer> IdList);
            mapper:
            <select id="selectForeachTwo" resultType="Morries_Wu.Bean.Student">
                select * from student
                <if test="list!=null and list.size>0">
                    where id in
                    <foreach collection="list" open="(" close=")" separator="," item="stu">
                            #{stu.id}
                    </foreach>
                </if>
            </select>

sql标签
sql标签标示一段sql代码,可以是表名,几个字段,where条件都可以,可以在其他地方复用sql标签的内容
使用方式:
1、在mapper文件中定义sql代码片段<sql id="唯一字符段"> 部分sql语句</sql>
2、在其他的位置,使用include标签引用某个代码片段
定义代码片段
    <sql id="selectStudent">select * from student</sql>
      <include refid="selectStudent"/>

第五章Mybatis配置文件
mybatis配置文件有两大类:
1、mybatis主配置文件
    提供mybatis全局设置的,包含的内容日志,数据源,mapper文件位置
2、mybatis的mapper文件
    写sql语句的,一个表一个mapper文件

settings部分
settings是mybatis的全局设置,影响整个mybatis的运行,这个设置一般使用默认值就可以了
typeAliase别名
environment:环境标签,在他里面可以配置多个environment,可以表示一个数据库的连接信息
       属性:
       1、id自定义的环境的标识。唯一值
       2、default,必须是某个environment的id属性值
transactionManager:事务管理器
       属性:type表示事务管理器的类型
       属性值:
       1、jdbc:使用Connection对象,由mybatis自己完成事务的处理
       2、MANAGED:管理,表示把事务的处理交给容器实现(由其他软件完成事务的提交,回滚)
dataSource:数据源,创建的Connection对象,连接数据库
       属性:type数据源的类型
       属性值:
       1、POOLED,mybatis会在内存中创建PooleDatSource类,管理多个Connection连接对象使用连接池
       2、UNPOOLED,不使用连接池,mybatis创建一个UnPooleDataSource这个类
       每次执行sql语句先创建Connection对象再执行sql语句,最后关闭连接
       3、JNDI:Java的命名和目录服务

使用数据库属性配置文件
需要把数据库的配置信息收到一个单独文件中,独立管理。这个文件扩展名properties
使用自定义的key=value的格式表示数据
使用步骤:
1、在resources目录中,创建xxx.properties
2、在文件中,使用key=value的格式定义数据
例如jdbc.url=jdbc:mysql://localhost:3306/srpingdb
3、在mybatis主配置文件,使用<properties>标签引用外部的属性配置文件
4、在使用的位置,使用${key}获取key的对应value(等号右侧的值)

mapper标签使用格式有两种常用的方式:
            第一种方式,resource="mapper文件路径"
            优点:文件清晰,加载文件是明确的,文件的位置比较灵活
            缺点:文件比较多,代码量会比较大,管理难度大
        <mapper resource="Morries_Wu/Dao/StudentDao.xml"/>
            第二种方式,使用<package>
            name:包名,mapper文件所在的包名
            特点:把这个包中所有mapper文件,一次加载。
            使用要求:
            1、mapper文件和dao接口在同一目录
            2、mapper文件和dao接口名称完全一致
        <package name="Morries_Wu.Dao"></package>

第六章PageHelper
PageHelper做数据分页。在你的select语句后面加入分页的sql内容,如果你使用的MySQL数据库
它就是在select * from student后面加入limit语句
Mybaatis通用分页插件
https://github.com/pagehelper/Mybatis-PageHelper
使用步骤:
1、加入依赖pagehelper依赖
    <dependency>
      <groupId>com.github.pagehelper</groupId>
      <artifactId>pagehelper</artifactId>
      <version>5.1.10</version>
    </dependency>
2、在mybatis主配置文件,加入(plugins)插件声明
    <plugins>
        <plugin interceptor="com.github.pagehelper.PageInterceptor"/>
    </plugins>
3、在select语句之前,调用PageHelper.startPage(页码,每页大小)
        PageHelper.startPage(1, 2);
        List<Student> stus = dao.selectAllStudents();


mybatis逆向工程
就是mybatis会根据我们设计好的数据表,自动生成Bean,mapper以及mapper.xml
将逆向工程添加到IDEA中
